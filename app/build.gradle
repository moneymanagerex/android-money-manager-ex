/*
 * Copyright (C) 2012-2018 The Android Money Manager Ex Project Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'

android {
    compileSdk rootProject.ext.compileSdk

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.money.manager.ex"
        versionCode 1053
        //versionName getVersionAsDate() + "." + versionCode
        versionName "2024.12.19"
        // $applicationId
        setProperty("archivesBaseName", "ammx-$versionName")

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdk rootProject.ext.targetSdk

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

//    buildTypes {
//        debug {
//            applicationIdSuffix ".debug"
//
//            minifyEnabled false
//            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//        beta {
//            applicationIdSuffix ".beta"
//            versionNameSuffix "-beta"
//
//            minifyEnabled false
//            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//
//            versionNameSuffix "-beta"
//        }
//        release {
//            minifyEnabled false
//            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//
//            versionNameSuffix "-release"
//        }
//    }

    dataBinding {
        enabled = true
    }

    flavorDimensions "distribution"
    productFlavors {
        fdroid {
            dimension "distribution"
            applicationIdSuffix ""
        }
        gplay {
            dimension "distribution"
            applicationIdSuffix ".android"
        }
        // beta {
        //     applicationId "com.money.manager.ex.beta"
        //     versionName "latestBeta"
        // }
        // stable {
        //     applicationId "com.money.manager.ex"
        // }
    }

    lintOptions {
        // stop the gradle build if errors are found - affects XML resources (strings, etc.).
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    signingConfigs {
        debug {
            // storeFile file("debug.keystore")
            v2SigningEnabled true
        }
        release {
            keyAlias 'ammex'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
//        unitTests.all {
//            systemProperty 'robolectric.offline', 'true'
//        }
        // http://robolectric.org/getting-started/
        unitTests {
            includeAndroidResources = true
        }
    }
    namespace 'com.money.manager.ex'
    buildFeatures {
        buildConfig true
    }
}

dependencies {
    // api ...
    implementation project(':MMEX_Icon_Font')
    implementation project(path: ':money')

    implementation(
            fileTree(dir: 'libs', include: ['*.jar'])
            , 'com.opencsv:opencsv:4.6'
            , 'net.objecthunter:exp4j:0.4.8'
            , 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'
            , 'com.melnykov:floatingactionbutton:1.3.0'
            , 'com.github.pedrovgs:lynx:1.6'
            , 'de.hdodenhof:circleimageview:2.2.0'
            , 'me.relex:circleindicator:2.1.6'  // Page indicator on tutorial. https://android-arsenal.com/details/1/1268
            , 'com.github.PhilJay:MPAndroidChart:v2.2.5'
            , 'org.javamoney:moneta-bp:1.4.1'
            , 'com.google.code.gson:gson:2.11.0'
            , 'net.zetetic:android-database-sqlcipher:4.5.4'   // database encryption
            , 'org.greenrobot:eventbus:3.3.1'
            , 'androidx.recyclerview:recyclerview:1.3.0'
            // For control over item selection of both touch and mouse driven selection
            , "androidx.recyclerview:recyclerview-selection:1.1.0"
            , 'org.jsoup:jsoup:1.18.3'              // HTML parsing.
            , 'androidx.multidex:multidex:2.0.1'  // multidex support
            , 'io.reactivex.rxjava2:rxandroid:2.1.1'
            , 'io.reactivex.rxjava2:rxjava:2.2.21'
            , 'com.squareup.sqlbrite3:sqlbrite:3.2.0' // use SqlDelight
            , 'com.jakewharton.timber:timber:5.0.1'
            , 'com.jakewharton.rxbinding:rxbinding:1.0.1'    // RxBinding
            , 'com.shamanland:fonticon:0.1.9'
            , 'com.mikepenz:iconics-core:3.2.5@aar' // also update in the icon module.
            , 'com.mikepenz:iconics-views:3.2.5@aar'
            , 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar' // MD icons
            , 'com.mikepenz:fontawesome-typeface:5.3.1.1@aar'
            , 'com.roomorama:caldroid:3.0.1'
            , 'androidx.work:work-runtime:2.8.1'
            , 'androidx.fragment:fragment:1.5.6'
            , 'androidx.biometric:biometric:1.1.0' // or the latest version
            , 'androidx.documentfile:documentfile:1.0.1'
            , 'com.caverock:androidsvg-aar:1.4'

    )
    implementation 'androidx.core:core:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'            // Retrofit
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.11.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.11.0'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.sqlite:sqlite:2.3.1'
    implementation 'androidx.sqlite:sqlite-framework:2.3.1'
    api 'com.google.guava:guava:33.4.0-jre' // collection libraries

    implementation('com.mikepenz:aboutlibraries:6.2.3@aar') {
        transitive = true
    }
    // Parceler
    implementation 'org.parceler:parceler-api:1.1.13'
    annotationProcessor 'org.parceler:parceler:1.1.13'
    // Dagger 2
    implementation 'com.google.dagger:dagger:2.53.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.53.1'
    // picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    testImplementation(
            // Robolectric
            'junit:junit:4.13.2',
            'org.assertj:assertj-core:3.26.3',
            'org.robolectric:robolectric:4.14.1',
            // Matchers
            'org.hamcrest:hamcrest-core:2.2',
            'org.hamcrest:hamcrest-library:2.2',
            'org.hamcrest:hamcrest-integration:1.3'
            , 'io.selendroid:selendroid-client:0.17.0'

    )
    testImplementation('io.selendroid:selendroid-standalone:0.17.0') {
        exclude group: 'io.selendroid', module: 'selendroid-server'
        exclude group: 'io.selendroid', module: 'android-driver-app'
    }

    // UI testing
    androidTestImplementation(
            'androidx.test:runner:1.5.2',
            // Set this dependency to use JUnit 4 rules
            'androidx.test:rules:1.5.0',
            // Set this dependency to build and run Espresso tests
            'androidx.test.espresso:espresso-core:3.5.1',
            'androidx.test.espresso:espresso-contrib:3.5.1',
            'org.hamcrest:hamcrest-core:2.2',
            'org.hamcrest:hamcrest-library:2.2',
            'com.squareup.assertj:assertj-android:1.2.0',
            'org.assertj:assertj-core:3.26.3',
    )
    // Set this dependency to build and run UI Automator tests
    //    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
    implementation 'com.amplitude:analytics-android:1.17.3'
}

configurations {
    androidTestCompile.exclude group: 'com.android.support', module: 'support-v4'
}

static def getVersionAsDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd')
    return formattedDate
}
